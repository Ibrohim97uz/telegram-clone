{"ast":null,"code":"import { CHAT_ID, MESSAGE_WITH, NEW_MESSAGE, USER_MESSAGE } from \"../action/types\";\nconst initialState = {\n  messages: [],\n  messageWith: \"\",\n  chatId: \"\"\n};\nexport const messageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case USER_MESSAGE:\n      return state = { ...state,\n        messages: [...action.payload]\n      };\n\n    case MESSAGE_WITH:\n      return state = { ...state,\n        messageWith: action.payload\n      };\n\n    case CHAT_ID:\n      return state = { ...state,\n        chatId: action.payload\n      };\n\n    case NEW_MESSAGE:\n      return state = { ...state,\n        messages: [state.messages, ...action.payload]\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Ibrohim/Desktop/telegram-clone/src/redux/reducer/messageReducer.js"],"names":["CHAT_ID","MESSAGE_WITH","NEW_MESSAGE","USER_MESSAGE","initialState","messages","messageWith","chatId","messageReducer","state","action","type","payload"],"mappings":"AAAA,SACEA,OADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,YAJF,QAKO,iBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,WAAW,EAAE,EAFM;AAGnBC,EAAAA,MAAM,EAAE;AAHW,CAArB;AAMA,OAAO,MAAMC,cAAc,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,YAAL;AACE,aAAQM,KAAK,GAAG,EACd,GAAGA,KADW;AAEdJ,QAAAA,QAAQ,EAAE,CAAC,GAAGK,MAAM,CAACE,OAAX;AAFI,OAAhB;;AAIF,SAAKX,YAAL;AACE,aAAQQ,KAAK,GAAG,EACd,GAAGA,KADW;AAEdH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAFN,OAAhB;;AAIF,SAAKZ,OAAL;AACE,aAAQS,KAAK,GAAG,EACd,GAAGA,KADW;AAEdF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAFD,OAAhB;;AAIF,SAAKV,WAAL;AACE,aAAQO,KAAK,GAAG,EACd,GAAGA,KADW;AAEdJ,QAAAA,QAAQ,EAAE,CAACI,KAAK,CAACJ,QAAP,EAAiB,GAAGK,MAAM,CAACE,OAA3B;AAFI,OAAhB;;AAIF;AACE,aAAOH,KAAP;AAtBJ;AAwBD,CAzBM","sourcesContent":["import {\r\n  CHAT_ID,\r\n  MESSAGE_WITH,\r\n  NEW_MESSAGE,\r\n  USER_MESSAGE,\r\n} from \"../action/types\";\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  messageWith: \"\",\r\n  chatId: \"\",\r\n};\r\n\r\nexport const messageReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case USER_MESSAGE:\r\n      return (state = {\r\n        ...state,\r\n        messages: [...action.payload],\r\n      });\r\n    case MESSAGE_WITH:\r\n      return (state = {\r\n        ...state,\r\n        messageWith: action.payload,\r\n      });\r\n    case CHAT_ID:\r\n      return (state = {\r\n        ...state,\r\n        chatId: action.payload,\r\n      });\r\n    case NEW_MESSAGE:\r\n      return (state = {\r\n        ...state,\r\n        messages: [state.messages, ...action.payload],\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
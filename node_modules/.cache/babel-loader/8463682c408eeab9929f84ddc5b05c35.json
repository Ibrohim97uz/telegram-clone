{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ibrohim\\\\Desktop\\\\telegram-clone\\\\src\\\\Components\\\\SearchResult.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { toast } from \"react-toastify\";\nimport { add_friend } from \"../redux/action/addFriend\";\nimport { clear_search } from \"../redux/action/searchAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchResult = () => {\n  _s();\n\n  const token = localStorage.getItem(\"token\");\n  const store = useSelector(data => data);\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    setMessage(store.searchReducer.searchFriendId);\n    dispatch(clear_search());\n    setFriendMessage(store.searchReducer.searchFriendId, store.searchReducer.searchName);\n  };\n\n  async function setFriendMessage(id, name) {\n    const resp = await fetch(`https://telegram-alisherjon-api.herokuapp.com/chats/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${token}`\n      },\n      method: \"GET\"\n    });\n    const respData = await resp.json();\n    const chatId = respData.chat._id;\n    const arr = [];\n    respData.chat.messages.forEach(message => {\n      let obj = {\n        messageId: message._id,\n        messageFrom: message.from,\n        messageText: message.text,\n        messageData: message.date\n      };\n      arr.push(obj);\n    });\n    dispatch(message_action(arr));\n    dispatch(message_with_action(name));\n    dispatch(chat_id_action(chatId));\n  }\n\n  async function setMessage(id) {\n    const body = JSON.stringify({\n      friendId: id\n    });\n    const resp = await fetch(\"https://telegram-alisherjon-api.herokuapp.com/chats/\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `Bearer ${token}`\n      },\n      method: \"POST\",\n      body\n    });\n    const respData = await resp.json();\n\n    if (respData.status !== 201) {\n      return toast.error(\"Chat is already exists!\");\n    }\n\n    const obj = {\n      chatId: respData.chat._id,\n      friendName: store.searchReducer.searchName,\n      friendPhone: store.searchReducer.phone\n    };\n    dispatch(add_friend(obj));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(),\n    className: store.searchReducer.isHidden ? \"search-result hidden\" : \"search-result \",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: store.searchReducer.searchName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: store.searchReducer.phone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchResult, \"TJyi8xTV/cllwIsFm0O4nJ8aGD4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SearchResult;\nexport default SearchResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchResult\");","map":{"version":3,"sources":["C:/Users/Ibrohim/Desktop/telegram-clone/src/Components/SearchResult.js"],"names":["React","useDispatch","useSelector","useHistory","toast","add_friend","clear_search","SearchResult","token","localStorage","getItem","store","data","dispatch","handleClick","setMessage","searchReducer","searchFriendId","setFriendMessage","searchName","id","name","resp","fetch","headers","authorization","method","respData","json","chatId","chat","_id","arr","messages","forEach","message","obj","messageId","messageFrom","from","messageText","text","messageData","date","push","message_action","message_with_action","chat_id_action","body","JSON","stringify","friendId","status","error","friendName","friendPhone","phone","isHidden"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { toast } from \"react-toastify\";\r\nimport { add_friend } from \"../redux/action/addFriend\";\r\nimport { clear_search } from \"../redux/action/searchAction\";\r\n\r\nconst SearchResult = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const store = useSelector((data) => data);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = () => {\r\n    setMessage(store.searchReducer.searchFriendId);\r\n    dispatch(clear_search());\r\n    setFriendMessage(\r\n      store.searchReducer.searchFriendId,\r\n      store.searchReducer.searchName\r\n    );\r\n  };\r\n\r\n  async function setFriendMessage(id, name) {\r\n    const resp = await fetch(\r\n      `https://telegram-alisherjon-api.herokuapp.com/chats/${id}`,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          authorization: `Bearer ${token}`,\r\n        },\r\n        method: \"GET\",\r\n      }\r\n    );\r\n\r\n    const respData = await resp.json();\r\n    const chatId = respData.chat._id;\r\n    const arr = [];\r\n    respData.chat.messages.forEach((message) => {\r\n      let obj = {\r\n        messageId: message._id,\r\n        messageFrom: message.from,\r\n        messageText: message.text,\r\n        messageData: message.date,\r\n      };\r\n      arr.push(obj);\r\n    });\r\n    dispatch(message_action(arr));\r\n    dispatch(message_with_action(name));\r\n    dispatch(chat_id_action(chatId));\r\n  }\r\n\r\n  async function setMessage(id) {\r\n    const body = JSON.stringify({\r\n      friendId: id,\r\n    });\r\n\r\n    const resp = await fetch(\r\n      \"https://telegram-alisherjon-api.herokuapp.com/chats/\",\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          authorization: `Bearer ${token}`,\r\n        },\r\n        method: \"POST\",\r\n        body,\r\n      }\r\n    );\r\n\r\n    const respData = await resp.json();\r\n\r\n    if (respData.status !== 201) {\r\n      return toast.error(\"Chat is already exists!\");\r\n    }\r\n\r\n    const obj = {\r\n      chatId: respData.chat._id,\r\n      friendName: store.searchReducer.searchName,\r\n      friendPhone: store.searchReducer.phone,\r\n    };\r\n    dispatch(add_friend(obj));\r\n  }\r\n\r\n  return (\r\n    <div\r\n      onClick={() => handleClick()}\r\n      className={\r\n        store.searchReducer.isHidden ? \"search-result hidden\" : \"search-result \"\r\n      }\r\n    >\r\n      <h3>{store.searchReducer.searchName}</h3>\r\n      <h3>{store.searchReducer.phone}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n"]},"metadata":{},"sourceType":"module"}